/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7-dev */

#ifndef PB_TRACK_OPTION_PB_H_INCLUDED
#define PB_TRACK_OPTION_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _CountLed {
    uint32_t count_led;
} CountLed;

typedef struct _LedPerMeter {
    uint32_t led_per_meter;
} LedPerMeter;

typedef struct _MaxLedLength {
    uint32_t max_led_length;
} MaxLedLength;

typedef struct _TrackOptions {
    pb_size_t which_options;
    union {
        MaxLedLength max_led_length;
        CountLed count_led;
        LedPerMeter led_per_meter;
    } options;
} TrackOptions;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define MaxLedLength_init_default                {0}
#define CountLed_init_default                    {0}
#define LedPerMeter_init_default                 {0}
#define TrackOptions_init_default                {0, {MaxLedLength_init_default}}
#define MaxLedLength_init_zero                   {0}
#define CountLed_init_zero                       {0}
#define LedPerMeter_init_zero                    {0}
#define TrackOptions_init_zero                   {0, {MaxLedLength_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define CountLed_count_led_tag                   1
#define LedPerMeter_led_per_meter_tag            1
#define MaxLedLength_max_led_length_tag          1
#define TrackOptions_max_led_length_tag          1
#define TrackOptions_count_led_tag               2
#define TrackOptions_led_per_meter_tag           3

/* Struct field encoding specification for nanopb */
#define MaxLedLength_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   max_led_length,    1)
#define MaxLedLength_CALLBACK NULL
#define MaxLedLength_DEFAULT NULL

#define CountLed_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   count_led,         1)
#define CountLed_CALLBACK NULL
#define CountLed_DEFAULT NULL

#define LedPerMeter_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   led_per_meter,     1)
#define LedPerMeter_CALLBACK NULL
#define LedPerMeter_DEFAULT NULL

#define TrackOptions_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (options,max_led_length,options.max_led_length),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (options,count_led,options.count_led),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (options,led_per_meter,options.led_per_meter),   3)
#define TrackOptions_CALLBACK NULL
#define TrackOptions_DEFAULT NULL
#define TrackOptions_options_max_led_length_MSGTYPE MaxLedLength
#define TrackOptions_options_count_led_MSGTYPE CountLed
#define TrackOptions_options_led_per_meter_MSGTYPE LedPerMeter

extern const pb_msgdesc_t MaxLedLength_msg;
extern const pb_msgdesc_t CountLed_msg;
extern const pb_msgdesc_t LedPerMeter_msg;
extern const pb_msgdesc_t TrackOptions_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define MaxLedLength_fields &MaxLedLength_msg
#define CountLed_fields &CountLed_msg
#define LedPerMeter_fields &LedPerMeter_msg
#define TrackOptions_fields &TrackOptions_msg

/* Maximum encoded size of messages (where known) */
#define CountLed_size                            6
#define LedPerMeter_size                         6
#define MaxLedLength_size                        6
#define TrackOptions_size                        8

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
