syntax = "proto3";

message LaneLengthConfig {
  uint32 lane_total_length_cm = 1;
  uint32 lace_active_length_cm = 2;
  uint32 lace_leds_num = 3;
  // we could calculate the distance between each led with the above two
}

enum LaneStatus {
  FORWARD = 0;
  BACKWARD = 1;
  STOP = 2;
}

message LaneColorConfig {
  uint32 rgb = 1;
  // reserved
  reserved 2;
}

message LaneSetStatus {
  LaneStatus status = 1;
}

message LaneSetSpeed {
  // in m/s
  double speed = 1;
}

// go through Control Characteristic via Notify/Read
message LaneState {
  LaneStatus status = 1;
  /// the distance between the start/end of the lane and the head of trail
  /// if the status is FORWARD, the head is the distance from the start
  /// if the status is BACKWARD, the head is the distance from the end
  uint32 head_cm = 2;
}

// use to config the lane
// go through Config Characteristic
message LaneConfig {
  oneof msg {
    LaneLengthConfig length_cfg = 1;
    LaneColorConfig color_cfg = 2;
  }
}

// use to control the lane
// go through Control Characteristic vid Write. The lane would clear the characteristic after processing and
// replace the buffer with `LaneState`
message LaneControl {
  oneof msg {
    LaneSetStatus set_status = 1;
    LaneSetSpeed set_speed = 2;
  }
}
